# Snakefile to align RNA-seq files with STAR 2-pass and quantify using RSEM
# Then summarize TPM values into a single table. 
# STAR parameters from https://github.com/broadinstitute/gtex-pipeline/blob/master/TOPMed_RNAseq_pipeline.md
# Used RSEM quantification options from Dobin and Gingeras (2015) Mapping RNA-seq Reads with STAR (https://dx.doi.org/10.1002/0471250953.bi1114s51)
# 2018.07.25 CJY
# 2018.08.31 cjyoon. Summary TPM table 

import os
import re
import pandas as pd

# PATH TO STAR FILES 
STAR = '/home/users/cjyoon/anaconda3/bin/STAR'
GENOMEDIR = '/home/users/cjyoon/reference/human_g1k_v37_starindex/'
RSEMDIR = '/home/users/cjyoon/reference/human_g1k_v37_starindex/rsem_ref'

SJDBGTF = "/home/users/cjyoon/reference/human_g1k_v37_starindex/Homo_sapiens.GRCh37.87.gtf"
REFERENCE = '/home/users/cjyoon/reference/GRCh37/human_g1k_v37.fasta'

# PATH TO RSEM
RSEM_CALCULATE_EXPRESSION = '/home/users/cjyoon/anaconda3/bin/rsem-calculate-expression'
RSEM_PREPARE_REFERENCE = '/home/users/cjyoon/anaconda3/bin/rsem-prepare-reference'

# PATH to SAMBAMBA
SAMBAMBA = '/home/users/cjyoon/anaconda3/bin/sambamba'


# Identify FASTQ file samples in the fastq folder
SAMPLES = list(set([ re.sub(r'_R[0-9]+.fastq.gz', '', i) for i in os.listdir('./fastq') if i.endswith('fastq.gz')]))

# Create output folder directories 
os.makedirs('./temp_bam', exist_ok=True)
os.makedirs('./star_bam', exist_ok=True)

rule all:
    input:
        bams = expand("rsem/{sample}.genes.results", sample=SAMPLES),
        tpm_table = 'tpm_table/tpm_table.tsv'
rule star_index: 
    input:
        STAR = STAR, 
        SJDBGTF = SJDBGTF, 
        REFERENCE = REFERENCE
    output:
        starindex = os.path.join(GENOMEDIR, 'SAindex')
    params:
        GENOMEDIR = GENOMEDIR
    threads: 12
    log:
        "logs/star_indexing.log"
    shell:
        "({input.STAR} --runThreadN {threads} --runMode genomeGenerate --genomeDir {params.GENOMEDIR} "
        "--genomeFastaFiles {input.REFERENCE} --sjdbGTFfile {input.SJDBGTF}) "
        "&> {log}"


rule star_align:
    input:
        STAR = STAR, 
        fastq1 = lambda wildcards: 'fastq/' + wildcards.sample + '_R1.fastq.gz',
        fastq2 = lambda wildcards: 'fastq/' + wildcards.sample + '_R2.fastq.gz',
        starindex = os.path.join(GENOMEDIR, 'SAindex')

    output: 
        reference_bam = "temp_bam/{sample}Aligned.out.bam", 
        transcriptome_bam = "temp_bam/{sample}Aligned.toTranscriptome.out.bam", 
    threads: 4
    log: 
        "logs/{sample}.star_align.log"
    params:
        sample = '{sample}', 
    shell:
        "({input.STAR} --runMode alignReads --runThreadN {threads} --genomeDir {GENOMEDIR} "
        "--twopassMode Basic "
        "--outFilterMultimapNmax 20 "
        "--alignSJoverhangMin 8 "
        "--alignSJDBoverhangMin 1 "
        "--outFilterMismatchNmax 999 "
        "--outFilterMismatchNoverLmax 0.1 "
        "--alignIntronMin 20 "
        "--alignIntronMax 1000000 "
        "--alignMatesGapMax 1000000 "
        "--outFilterType BySJout "
        "--outFilterScoreMinOverLread 0.33 "
        "--outFilterMatchNminOverLread 0.33 "
        "--limitSjdbInsertNsj 1200000 " 
        "--outFileNamePrefix temp_bam/{params.sample} "
        "--outSAMstrandField intronMotif "
        "--outFilterIntronMotifs None "
        "--alignSoftClipAtReferenceEnds Yes "
        "--quantMode TranscriptomeSAM GeneCounts "
        "--outSAMunmapped Within "
        "--genomeLoad NoSharedMemory "
        "--chimSegmentMin 15 "
        "--chimJunctionOverhangMin 15 "
        "--chimOutType WithinBAM SoftClip "
        "--chimMainSegmentMultNmax 1 "
        "--outSAMattributes NH HI AS nM NM ch "
        "--sjdbGTFfile {SJDBGTF} --readFilesIn {input.fastq1} {input.fastq2} "
        "--readFilesCommand zcat --outSAMtype BAM Unsorted "
        "--outSAMattrRGline ID:{params.sample} SM:{params.sample} --outBAMsortingThreadN {threads} "
        "--bamRemoveDuplicatesType UniqueIdentical) "
        " &> {log}"

rule bam_sort:
    input:
        SAMBAMBA = SAMBAMBA, 
        reference_bam = temp("temp_bam/{sample}Aligned.out.bam"), 
        transcriptome_bam = "temp_bam/{sample}Aligned.toTranscriptome.out.bam", 
    output:
        final_reference_bam = "star_bam/{sample}.reference.bam", 
        final_transcriptome_bam = "star_bam/{sample}.transcriptome.bam"
    threads: 4
    log:
        "logs/{sample}.bam_sort.log"
    shell:
        "({input.SAMBAMBA} sort -t {threads} --tmpdir=./temp_bam -o {output.final_reference_bam} {input.reference_bam}; "
        "mv {input.transcriptome_bam} {output.final_transcriptome_bam})"
        " &> {log}"



rule rsem_prepare_reference:
    input:
        SJDBGTF = SJDBGTF, 
        REFERENCE = REFERENCE, 
        RSEM_PREPARE_REFERENCE = RSEM_PREPARE_REFERENCE
    params:
        RSEMDIR = RSEMDIR
    output: 
        RSEMDIR + ".idx.fa"
    threads: 12
    log:
        "logs/rsem_prepare_reference.log"
    shell:
        "({input.RSEM_PREPARE_REFERENCE} -p {threads} --gtf {input.SJDBGTF} {input.REFERENCE} {params.RSEMDIR}) "
        " &> {log}"


rule rsem_calculate_expression:
  params:
    sample = "{sample}", 
    RSEMDIR = RSEMDIR
  input:
    RSEM_CALCULATE_EXPRESSION = RSEM_CALCULATE_EXPRESSION, 
    transcriptome_bam = "star_bam/{sample}.transcriptome.bam", 
    rsem_index = RSEMDIR + ".idx.fa"
  output:
    "rsem/{sample}.genes.results"
  threads: 4

  log:
    "logs/{sample}.rsem.log"
  shell:
    "({input.RSEM_CALCULATE_EXPRESSION} --bam --no-bam-output -p {threads} --paired-end --forward-prob 0 "
    "{input.transcriptome_bam} {params.RSEMDIR} rsem/{params.sample})"
    " >& {log}"

rule tpm_table:
    input:
        expand('rsem/{sample}.genes.results', sample=SAMPLES)
    output:
        tpm_table = 'tpm_table/tpm_table.tsv'
    threads: 1
    log:
        "logs/tpm_table.log"
    run:
        def merge_tpm(tpm_list):
            '''merge RSEM results into a single table using pandas'''
            tpm_series = []
            for tpm in tpm_list:
                sampleID = re.sub('.genes.results', '', os.path.basename(tpm))
                df = pd.read_table(tpm, sep='\t')
                df.index = df['gene_id']
                df_tpm = df['TPM']
                df_tpm = df_tpm.to_frame()
                df_tpm.columns = [sampleID]
                tpm_series.append(df_tpm)

            final_table = tpm_series[0]
            for tpm_vector in  tpm_series[1:]:
                final_table = final_table.merge(tpm_vector, left_index=True, right_index=True)
            return final_table
        
        tpm_table = merge_tpm(input)
        tpm_table.to_csv(output.tpm_table, sep='\t', index=True, header=True)


